package com.zikgu.example.controller;

import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import com.zikgu.example.domain.Board;
import com.zikgu.example.domain.Player;
import com.zikgu.example.domain.User;
import com.zikgu.example.service.BoardService;
import com.zikgu.example.service.UserService;

@org.springframework.stereotype.Controller
public class Controller {
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired UserService userservice;
	@Autowired BoardService boardservice;
	
	@RequestMapping("/")
	public String home(Model model) {
		
		List<Board> list = boardservice.selectBoardList();
		model.addAttribute("list", list);
		logger.debug("debug");
	     logger.info("info");
	     logger.error("error");
		return "/index";
	}

	
	@RequestMapping("/beforeSignup") 
	public String beforeSignUp() {
		return "/signup";
	}
	
	@RequestMapping("/signup")
	   public String signup(User user) {
	      //비밀번호 암호화
	      String encodedPassword = new BCryptPasswordEncoder().encode(user.getPassword());
	      
	      //유저 데이터 세팅
	      user.setPassword(encodedPassword);
	      user.setAccountNonExpired(true);
	      user.setEnabled(true);
	      user.setAccountNonLocked(true);
	      user.setCredentialsNonExpired(true);
	      user.setAuthorities(AuthorityUtils.createAuthorityList("ROLE_USER"));   
	      
	      //유저 생성
	      userservice.createUser(user);
	      //유저 권한 생성
	      userservice.createAuthorities(user);
	      
	      return "/login";
	   }
	
	@RequestMapping(value="/login")
	   public String beforeLogin(Model model) {
	      return "/login";
	   }
	
		@Secured({"ROLE_ADMIN"})
	   @RequestMapping(value="/admin")
	   public String admin(Model model) {
	      return "/admin";
	   }
	   
	   @Secured({"ROLE_USER"})
	   @RequestMapping(value="/user/info")
	   public String userInfo(Model model) {
	      
	      return "/user_info";
	   }
	   
	   @RequestMapping(value="/denied")
	   public String denied(Model model) {
	      return "/denied";
	   }
	   
	   @RequestMapping("/game")
	   public String game(Player player) {
		   ArrayList<String> dollarlist = new ArrayList<String>();
			  String url = "https://www.google.com/search?q=1%EB%8B%AC%EB%9F%AC&rlz=1C1CHZN_koKR994KR994&sxsrf=ALiCzsYtAlRgrTRd7R0nZnWL9cARPO-IHw%3A1664862812997&ei=XMo7Y968PPHM2roPocSS-AY&ved=0ahUKEwje2sWk8cX6AhVxplYBHSGiBG8Q4dUDCA4&uact=5&oq=1%EB%8B%AC%EB%9F%AC&gs_lcp=Cgdnd3Mtd2l6EAMyEAgAEIAEELEDEIMBEEYQggIyBQgAEIAEMgsIABCABBCxAxCDATIFCAAQgAQyBQgAEIAEMgsIABCABBCxAxCDATIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQ6CggAEEcQ1gQQsAM6BAgjECc6BAgAEEM6CAgAEIAEELEDSgQIQRgASgQIRhgAUOwCWIkKYLwKaAFwAXgAgAF0iAGwA5IBAzAuNJgBAKABAcgBCsABAQ&sclient=gws-wiz";
			   //String url = "https://www.matchesfashion.com/kr/womens/designers";   //조회할 url셋팅
			   System.out.println("===========================");
			   System.out.println("url : " + url);
			   
			Document doc = Jsoup.connect(url).get();
			   
			  //	Document doc = Jsoup.connect(url).userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36").get();
			  // Elements element = doc.select("span.spt_con.up");
			Elements element = doc.select("span.DFlfde.SwHCTb");
			   for(Element el : element.select("span")) {
				   System.out.println(el.text());
				   dollarlist.add(el.text());
				   
			   }
	
			   String str = "";
			   double dollar2 = 0;
				for (String fruit : dollarlist) {
					str+= fruit;
					str = str.replaceAll(",", "");
					 dollar2 = Double.parseDouble(str);
				}
				dollar.setDollar(dollar2);
	     
	      
	      return "/game";
	   }
}