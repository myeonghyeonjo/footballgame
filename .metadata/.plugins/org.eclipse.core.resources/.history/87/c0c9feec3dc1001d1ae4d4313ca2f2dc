package com.zikgu.example.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.zikgu.example.domain.Board;
import com.zikgu.example.domain.Player;
import com.zikgu.example.domain.User;
import com.zikgu.example.service.BoardService;
import com.zikgu.example.service.PlayerService;
import com.zikgu.example.service.UserService;

@org.springframework.stereotype.Controller
public class Controller {
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired UserService userservice;
	@Autowired BoardService boardservice;
	@Autowired PlayerService playerservice;
	
	@RequestMapping("/")
	public String home(Model model) {
		
		//List<Board> list = boardservice.selectBoardList();
		//model.addAttribute("list", list);
		logger.debug("debug");
	     logger.info("info");
	     logger.error("error");
		return "/index";
	}

	
	@RequestMapping("/beforeSignup") 
	public String beforeSignUp() {
		return "/signup";
	}
	
	@RequestMapping("/signup")
	   public String signup(User user) {
	      //비밀번호 암호화
	      String encodedPassword = new BCryptPasswordEncoder().encode(user.getPassword());
	      
	      //유저 데이터 세팅
	      user.setPassword(encodedPassword);
	      user.setAccountNonExpired(true);
	      user.setEnabled(true);
	      user.setAccountNonLocked(true);
	      user.setCredentialsNonExpired(true);
	      user.setAuthorities(AuthorityUtils.createAuthorityList("ROLE_USER"));   
	      
	      //유저 생성
	      userservice.createUser(user);
	      //유저 권한 생성
	      userservice.createAuthorities(user);
	      
	      return "/login";
	   }
	
	@RequestMapping(value="/login")
	   public String beforeLogin(Model model) {
	      return "/login";
	   }
	
		@Secured({"ROLE_ADMIN"})
	   @RequestMapping(value="/admin")
	   public String admin(Model model) {
	      return "/admin";
	   }
	   
	   @Secured({"ROLE_USER"})
	   @RequestMapping(value="/user/info")
	   public String userInfo(Model model) {
	      
	      return "/user_info";
	   }
	   
	   @RequestMapping(value="/denied")
	   public String denied(Model model) {
	      return "/denied";
	   }
	   
	   @RequestMapping("/game")
	   public String game(Player player,Model model,HttpServletRequest request) {
		   List<Player> list =  playerservice.selectPlayerList(); 
		   System.out.println("유저리스트 데이터 가져오기 성공" + list);
		   model.addAttribute("list", list);
	      return "/game";
	   }
	   
	   @RequestMapping("/getPlayer")
	   public String getPlayer(@RequestParam String tagName) {
		   return simulateSearchResult(tagName);
	   }
	   
	   private List<Player> simulateSearchResult(String tagName) {
		   List<Player> result = new ArrayList<Player>();
		   // iterate a list and filter by tagName
		   try{
		   	for (Player tag : data) {
		      	if (tag.getTagName().contains(tagName)) {
		          	result.add(tag);
		          }
		      }
		    }catch(Exception e){
		    	System.err.println(e.getMessage());
		    }
		    return result;
		  }
}